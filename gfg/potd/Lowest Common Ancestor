/*
Question: Lowest Common Ancestor in a BST
Link: https://practice.geeksforgeeks.org/problems/lowest-common-ancestor-in-a-bst/1
*/

Node* LCA(Node *root, int n1, int n2)
        {
            //Lowest common ancestor of 2 nodes is the smallest/ nearest common node for the 2 nodes in the
            //path from those nodes to root node
            //if we get any of those nodes while traversing => that is the LCA
            if(!root || root->data == n1 || root->data == n2){
                return root;
            }
            //calculate LCA of left and right subtree recursively
            Node* leftLCA = LCA(root->left, n1, n2);
            Node* rightLCA = LCA(root->right, n1, n2);
            //if both left and right lca exist => root is lowest ca
            //else which ever of the left lca or right lca exist, that will become the lca
            if(leftLCA && rightLCA)
                return root;
            if(leftLCA)
                return leftLCA;
            return rightLCA;
        }
