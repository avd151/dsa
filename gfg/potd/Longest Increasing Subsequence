/*
Question: Longest Increasing Subsequence
Link: https://practice.geeksforgeeks.org/problems/longest-increasing-subsequence-1587115620/1
*/

class Solution
{
    public:
    //Function to find length of longest increasing subsequence.
    int longestSubsequence(int n, int a[])
    {
        //dp - tabulation also gives TLE
        // vector<int> dp(n, 1);
        // int maxi = 1;
        // for (int i = 0; i < n; i++)
        // {
        //     for (int j = 0; j < i; j++)
        //     {
        //         if (a[j] < a[i] && 1 + dp[j] > dp[i])
        //         {
        //             dp[i] = 1 + dp[j];
        //         }
        //     }
        //     maxi = max(maxi, dp[i]);
        // }
        // return maxi;
        
        //binary search
        vector<int>ans;
        int lis = 1;
        ans.push_back(a[0]);
        for(int i = 1; i < n; i++){
            if(a[i] > ans.back()){
                ans.push_back(a[i]);
                lis++;
            }
            else{
                int idx = lower_bound(ans.begin(), ans.end(), a[i]) - ans.begin();
                ans[idx] = a[i];
            }
        }
        return lis;
            
    }
};
