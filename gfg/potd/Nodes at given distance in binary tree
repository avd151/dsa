/*
Question: Nodes at given distance in binary tree
Link: https://practice.geeksforgeeks.org/problems/nodes-at-given-distance-in-binary-tree/1
*/

class Solution
{
private:
    int findDistance(Node* root, int target, vector<int>& res, int k){
        if(!root)
            return -1;
        if(root->data == target){
            atDistanceNodes(root, res, k);
            return 0;
        }
        int leftDist = findDistance(root->left, target, res, k);
        if(leftDist != -1){
            if(leftDist+1 == k)
                res.push_back(root->data);
            else
                atDistanceNodes(root->right, res, k-leftDist-2);
            return leftDist+1;
        }
        int rightDist = findDistance(root->right, target, res, k);
        if(rightDist != -1){
            if(rightDist+1 == k)
                res.push_back(root->data);
            else
                atDistanceNodes(root->left, res, k-rightDist-2);
            return rightDist+1;
        }
        return -1;
    }
    void atDistanceNodes(Node* root, vector<int>& res, int dis){
        if(!root || dis < 0){
            return;
        }
        if(dis == 0){
            res.push_back(root->data);
            return;
        }
        atDistanceNodes(root->left, res, dis-1);
        atDistanceNodes(root->right, res, dis-1);
    }
public:

    vector <int> KDistanceNodes(Node* root, int target , int k)
    {
        // return the sorted vector of all nodes at k dist
        vector<int>res;
        findDistance(root, target, res, k);
        sort(res.begin(), res.end());
        return res;
    }
};
