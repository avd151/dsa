/*
Question: Validate Binary Tree Nodes
Link: https://leetcode.com/problems/validate-binary-tree-nodes/description/
*/

class Solution {
    int findRoot(int n, vector<int>left, vector<int>right){
        unordered_set<int>s;
        s.insert(left.begin(), left.end());
        s.insert(right.begin(), right.end());
        for(int i = 0; i < n; i++){
            if(s.find(i) == s.end())
                return i;
        }
        return -1;
    }
public:
    bool validateBinaryTreeNodes(int n, vector<int>& leftChild, vector<int>& rightChild) {
        int root = findRoot(n, leftChild, rightChild);
        if(root == -1)
            return false;
        // unordered_set<int>seen;
        // stack<int>st;
        // st.push(root);
        // seen.insert(root);
        // //iterative DFS with stack
        // while(!st.empty()){
        //     int node = st.top();
        //     st.pop();
        //     int children[] = {leftChild[node], rightChild[node]};
        //     for(int child: children){
        //         if(child != -1){
        //             if(seen.find(child) != seen.end())
        //                 return false;
        //             seen.insert(child);
        //             st.push(child);
        //         }
        //     }
        // }
        // return (seen.size() == n);

        //BFS with queue
        unordered_set<int>seen;
        queue<int>q;
        seen.insert(root);
        q.push(root);
        while(!q.empty()){
            int node = q.front();
            q.pop();
            int children[] = {leftChild[node], rightChild[node]};
            for(int child: children){
                if(child != -1){
                    if(seen.find(child) != seen.end())
                        return false;
                    seen.insert(child);
                    q.push(child);
                }
            }
        }
        return seen.size() == n;
    }
};
