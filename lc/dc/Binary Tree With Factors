/*
Question: Binary Tree With Factors
Link: https://leetcode.com/problems/binary-trees-with-factors/
*/

class Solution {
    int MOD = 1e9 + 7;
public:
    int numFactoredBinaryTrees(vector<int>& arr) {
        //no. of binary trees we can form using arr elements
        //each non leaf node val = product of val of its children
        sort(arr.begin(), arr.end());
        unordered_set<int>s(arr.begin(), arr.end());
        unordered_map<int,int>dp;
        for(int x: arr){
            dp[x] = 1;
        }
        for(auto i: arr){
            for(auto j: arr){
                if(j > sqrt(i))
                    break;
                if(i%j == 0 && s.find(i/j) != s.end()){
                    long long temp = (long long)dp[j] * dp[i/j];
                    if(i/j == j)
                        dp[i] = (dp[i] + temp) % MOD;
                    else
                        dp[i] = (dp[i] + temp*2) % MOD;
                }
            }
        }
        int res = 0;
        for(auto it: dp){
            res = (res + it.second) % MOD;
        }
        return res;
    }
};

