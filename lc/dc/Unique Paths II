/*
Question: Unique Paths II
Link: https://leetcode.com/problems/unique-paths-ii/description/
*/

class Solution {
private:
    int solve(int i, int j, int m, int n, vector<vector<int>>obstacles, vector<vector<int>>& dp){
        if(i >= m || j >= n || i < 0 || j < 0)
            return 0;
        if(i == (m-1) && j == (n-1) && !obstacles[i][j])
            return 1;
        if(obstacles[i][j] == 1)
            return 0;
        if(dp[i][j] != -1)
            return dp[i][j];
        int down = solve(i+1, j, m, n, obstacles, dp);
        int right = solve(i, j+1, m, n, obstacles, dp);
        return dp[i][j] = down+right;
    }
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m = obstacleGrid.size();
        int n = obstacleGrid[0].size();
        // if(obstacleGrid[0][0] == 1)
        //     return 0;
        // //recursion - TLE
        // //memoization
        // vector<vector<int>>dp(m, vector<int>(n,-1));
        // int ans = solve(0, 0, m, n, obstacleGrid, dp);
        // return ans;
        vector<vector<int>>dp(m+1, vector<int>(n+1, 0));
        dp[0][1] = 1;
        for(int i = 1; i<=m; i++){
            for(int j = 1; j <=n; j++){
                if(obstacleGrid[i-1][j-1])
                    dp[i][j] = 0;
                else
                    dp[i][j] = dp[i-1][j] + dp[i][j-1];
            }
        }
        return dp[m][n];
    }
};
