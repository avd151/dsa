=> Sliding window + 2 pointer 

= Number of substrings containing all 3 characters
Q. Given a string s consisting only of characters a, b and c. Return the number of substrings containing at least one occurrence of all these characters a, b and c.
Link: https://leetcode.com/problems/number-of-substrings-containing-all-three-characters/description/

class Solution {
public:
    int numberOfSubstrings(string s) {
        int n = s.size();
        int ans = 0;
        //TC=O(n^2), SC=O(3)
        // for(int i = 0; i < n; i++){
        //     int hash[3] = {0};
        //     for(int j = i; j < n; j++){
        //         hash[s[j]-'a'] = 1;
        //         if(hash[0] + hash[1] + hash[2] == 3){
        //             // ans++;
        //             ans += (n-j);
        //             break;
        //         }
        //     }
        // }

        //for every character, there is a substring that ends with it
        //no. of substrings ending at index i = i+1 
        //TC=O(n), SC=O(3)
        int lastSeen[3] = {-1, -1, -1};
        for(int i = 0; i < n; i++){
            lastSeen[s[i]-'a'] = i;
            // if(lastSeen[0] != -1 && lastSeen[1] != -1 && lastSeen[2] != -1){
            //     ans = ans + (1 + min({lastSeen[0], lastSeen[1], lastSeen[2]}));
            // }
            ans = ans + (1 + min({lastSeen[0], lastSeen[1], lastSeen[2]}));
        }
        return ans;
    }
};

= Longest Repeating Character Replacement
Q. You are given a string s and an integer k. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most k times.
Return the length of the longest substring containing the same letter you can get after performing the above operations.
Link: https://leetcode.com/problems/longest-repeating-character-replacement/description/

brute -
    generate all substrings
    convert char appearing min no. of times to one appearing more/ max times
    no. of conversions = len of substring - max freq of char in substring 
class Solution {
public:
    int characterReplacement(string s, int k) {
        int n = s.size();
        int maxLen = 0;
        //TC=O(n^2), SC=O(26)
        // for(int i = 0; i < n; i++){
        //     int hash[26] = {0};
        //     int maxFreq = 0;
        //     int changes = 0;
        //     for(int j = i; j < n; j++){
        //         hash[s[j]-'A']++;
        //         maxFreq = max(maxFreq, hash[s[j]-'A']);
        //         changes = (j-i+1) - maxFreq;
        //         if(changes <= k){
        //             maxLen = max(maxLen, j-i+1);
        //         }
        //     }
        // }

        //TC=O((n+n)*26), SC=O(26)
        // int maxFreq = 0;
        // int hash[26] = {0};
        // int l = 0, r = 0;
        // while(r < n){
        //     hash[s[r]-'A']++;
        //     maxFreq = max(maxFreq, hash[s[r]-'A']);
        //     while((r-l+1)-maxFreq > k){
        //         hash[s[l]-'A']--;
        //         maxFreq = 0;
        //         for(int i = 0; i < 26; i++){
        //             maxFreq = max(maxFreq, hash[i]);
        //         }
        //         l++;
        //     }
        //     if((r-l+1)-maxFreq <= k){
        //         maxLen = max(maxLen, r-l+1);
        //     }
        //     r++;
        // }
        int maxFreq = 0;
        int hash[26] = {0};
        int l = 0, r = 0;
        while(r < n){
            hash[s[r]-'A']++;
            maxFreq = max(maxFreq, hash[s[r]-'A']);
            if((r-l+1)-maxFreq > k){
                hash[s[l]-'A']--;
                maxFreq = 0;
                //not reqd to recompute max freq as already a max freq has given valid maxlen value
                //=> as we reduce it, and reduce substring len as well, maxlen will also reduce
                l++;
            }
            if((r-l+1)-maxFreq <= k){
                maxLen = max(maxLen, r-l+1);
            }
            r++;
        }
        return maxLen;
    }
};

= Binary Subarrays with Sum
Q. Given a binary array nums and an integer goal, return the number of non-empty subarrays with a sum goal. A subarray is a contiguous part of the array.
Link: https://leetcode.com/problems/binary-subarrays-with-sum/description/
//Sliding window 
class Solution {
    int f(vector<int>nums, int goal){
        //to find no. of subarrays with sum <= goal
        //using sliding window
        if(goal < 0)
            return 0;
        int n = nums.size();
        int l = 0, r = 0, sum = 0, cnt = 0;
        while(r < n){
            sum += nums[r];
            while(sum > goal){
                sum -= nums[l];
                l += 1;
            }
            cnt = cnt + (r-l+1);
            r += 1;
        }
        return cnt;
    }
public:
    int numSubarraysWithSum(vector<int>& nums, int goal) {
        //count subarrays with given sum
        //O(n^2)
        // int ans = 0;
        // int n = nums.size();
        // for(int i = 0; i < n; i++){
        //     int sum = 0;
        //     for(int j = i; j < n; j++){
        //         sum += nums[j];
        //         if(sum == goal)
        //             ans++;
        //     }
        // }
        // return ans;

        //TC=O(2*2n), SC=O(1)
        int ans = f(nums, goal) - f(nums, goal-1);
        return ans;
    }
};

//Hashing solution - TC=O(n), SC=O(n)

= Count Number of Nice Subarrays
Q. Given an array of integers nums and an integer k. A continuous subarray is called nice if there are k odd numbers on it.
Return the number of nice sub-arrays.
Link: https://leetcode.com/problems/count-number-of-nice-subarrays/description/
class Solution {
    int f(vector<int>nums, int goal){
        int l = 0, r = 0;
        int n = nums.size();
        int sum = 0;
        int cnt = 0;
        while(r < n){
            sum += (nums[r] % 2);
            while(sum > goal){
                sum -= (nums[l] % 2);
                l += 1;
            }
            if(sum <= goal){
                cnt += (r-l+1);
            }
            r += 1;
        }
        return cnt;
    }
public:
    int numberOfSubarrays(vector<int>& nums, int k) {
        //count no. of odd numbers is exactly equal to k 
        //=> convert it to count no. of binary subarrays with sum = k 
        //by taking odd num = 1, and even = 0
        //TC=O(2n), SC=O(1)
        return f(nums, k) - f(nums, k-1);
    }
};

= Subarrays with K Different Integers
Q. Given an integer array nums and an integer k, return the number of good subarrays of nums.
A good array is an array where the number of different integers in that array is exactly k.
Link: https://leetcode.com/problems/subarrays-with-k-different-integers/
class Solution {
    int f(vector<int>nums, int k){
        int n = nums.size();
        unordered_map<int,int>mp;
        int l = 0, r = 0, cnt = 0;
        while(r < n){
            mp[nums[r]]++;
            while(mp.size() > k){
                mp[nums[l]]--;
                if(mp[nums[l]] == 0)
                    mp.erase(nums[l]);
                l += 1;
            }
            if(mp.size() <= k)
                cnt += (r-l+1);
            r += 1;
        }
        return cnt;
    }
public:
    int subarraysWithKDistinct(vector<int>& nums, int k) {
        int n = nums.size();
        //brute - TC=O(n^2), SC=O(n);
        // unordered_set<int>s;
        // int cnt = 0;
        // for(int i = 0; i < n; i++){
        //     for(int j = i; j < n; j++){
        //         s.insert(nums[j]);
        //         if(s.size() == k)
        //             cnt++;
        //         if(s.size() > k)
        //             break;
        //     }
        //     s.clear();
        // }
        // return cnt;
        return f(nums, k) - f(nums, k-1);
    }
};

= Minimum Window Substring
Q. Given two strings s and t of lengths m and n respectively, return the minimum window 
substring of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string "".
Link: https://leetcode.com/problems/minimum-window-substring/description/
class Solution {
public:
    string minWindow(string s, string t) {
        //brute force
        //TC=O(n(n+m)), SC=O(256)
        int n = s.size(), m = t.size();
        int minLen = INT_MAX;
        int sIndex = -1;
        // for(int i = 0; i < n; i++){
        //     int hash[256] = {0};
        //     for(int k = 0; k < m; k++){
        //         hash[t[k]]++;
        //     }
        //     int cnt = 0;
        //     for(int j = i; j < n; j++){
        //         if(hash[s[j]] > 0)
        //             cnt++;
        //         hash[s[j]]--;
        //         if(cnt == m){
        //             if(j-i+1 < minLen){
        //                 minLen = j-i+1;
        //                 sIndex = i;
        //                 break;
        //             } 
        //         }
        //     }
        // }

        //sliding window
        //TC=O(m+2n), SC=O(256)
        int l = 0, r = 0;
        int hash[256] = {0};
        for(int i = 0; i < m; i++){
            hash[t[i]]++;
        }
        int cnt = 0;
        while(r < n){
            if(hash[s[r]] > 0)
                cnt = cnt+1;
            hash[s[r]]--;
            while(cnt == m){
                if(r-l+1 < minLen){
                    minLen = r-l+1;
                    sIndex = l;
                }
                hash[s[l]]++;
                if(hash[s[l]] > 0)
                    cnt = cnt-1;
                l = l+1;
            }
            r = r+1;
        }   
        return sIndex == -1 ? "" : s.substr(sIndex, minLen);  
    }
};

= Slding Window Maximum
Q. You are given an array of integers nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.
Return the max sliding window.
Link: https://leetcode.com/problems/sliding-window-maximum/
class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        int n = nums.size();
        priority_queue<pair<int,int>>pq;
        vector<int>ans(n-k+1);
        for(int i = 0; i < k; i++){
            pq.push({nums[i], i});
        }
        ans[0] = pq.top().first;
        for(int i = k; i < n; i++){
            while(!pq.empty() && pq.top().second <= (i-k)){
                pq.pop();
            }
            pq.push({nums[i], i});
            ans[i-k+1] = pq.top().first;
        }
        return ans;
    }
};