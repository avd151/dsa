// Questions to revise from daily challenge and contests

=> Minimum Cost to Hire K Workers
Q. There are n workers. You are given two integer arrays quality and wage where quality[i] is the quality of the ith worker and wage[i] is the minimum wage expectation for the ith worker. We want to hire exactly k workers to form a paid group. To hire a group of k workers, we must pay them according to the following rules:
Every worker in the paid group must be paid at least their minimum wage expectation.
In the group, each worker's pay must be directly proportional to their quality. This means if a workerâ€™s quality is double that of another worker in the group, then they must be paid twice as much as the other worker.
Given the integer k, return the least amount of money needed to form a paid group satisfying the above conditions. Answers within 10-5 of the actual answer will be accepted.
Link: https://leetcode.com/problems/minimum-cost-to-hire-k-workers/description
class Solution {
public:
    double mincostToHireWorkers(vector<int>& quality, vector<int>& wage, int k) {
        //TC=O(nlogn + nlogk), SC=O(logn + k)
        vector<pair<double, int>>workers;
        int n = quality.size();
        for(int i = 0; i < n; i++){
            workers.push_back({(double)wage[i]/quality[i], quality[i]});
        }
        //store acc to sorted order of ratio (wage/quality)
        //paid to all = sum of quality of remaining * ratio of 1 person
        //to take min for k elements -> using max heap to remove max quality
        sort(workers.begin(), workers.end());
        priority_queue<int>pq;
        double ans = DBL_MAX;
        double qualitySum = 0;
        for(int i = 0; i < n; i++){
            double ratio = workers[i].first;
            int quality = workers[i].second;
            qualitySum += quality;
            pq.push(quality);
            if(pq.size() > k){
                qualitySum -= pq.top();
                pq.pop();
            }
            if(pq.size() == k){
                ans = min(ans, qualitySum*ratio);
            }
        }
        return ans;
    }
};

=> Score after flipping matrix
Q. You are given an m x n binary matrix grid.
A move consists of choosing any row or column and toggling each value in that row or column (i.e., changing all 0's to 1's, and all 1's to 0's).
Every row of the matrix is interpreted as a binary number, and the score of the matrix is the sum of these numbers.
Return the highest possible score after making any number of moves (including zero moves).
Link: https://leetcode.com/problems/score-after-flipping-matrix/
class Solution {
public:
    int matrixScore(vector<vector<int>> grid) {
        // //TC=O(n*m), SC-=O(n*m)
        // //convert 1st columns of each row to 1
        // int rows = grid.size();
        // int cols = grid[0].size();
        // int ans = 0;
        // for(int i = 0; i < rows; i++){
        //     if(grid[i][0] != 1){
        //         //flip all numbers in that row
        //         for(int j = 0; j < cols; j++){
        //             grid[i][j] ^= 1;
        //         }
        //     }
        // }
        // //find no. of 1s in each column for a row, 
        // //if its less than n/2 or colCount < (n-colCount),
        // // then flip the elements of that column
        // for(int j = 1; j < cols; j++){
        //     int colCount = 0;
        //     for(int i = 0; i < rows; i++){
        //         colCount += grid[i][j];
        //     }
        //     if(colCount < rows-colCount){
        //         //flip all nos. in column
        //         for(int i = 0; i < rows; i++){
        //             grid[i][j] ^= 1;
        //         }
        //     }
        // }
        // //find total sum of all numbers
        // for(int i = 0; i < rows; i++){
        //     for(int j = 0; j < cols; j++){
        //         ans += grid[i][j]*(1 << (cols-1-j));
        //     }
        // }
        // return ans;

        int n = grid.size();
        int m = grid[0].size();
        int ans = n*(1 << (m-1-0));
        for(int j = 1; j < m; j++){
            int colCount = 0;
            for(int i = 0; i < n; i++){
                colCount += (grid[i][0] == 0 ? grid[i][j]^1 : grid[i][j]);
            }
            if(colCount < n-colCount){
                ans += (n-colCount)*(1 << (m-1-j));
            }
            else{
                ans += (colCount)*(1 << (m-1-j));
            }
        }
        return ans;
    }
};